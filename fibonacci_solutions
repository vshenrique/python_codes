## Naive recursive function used to get Fib(n)
def naive(n):
    if (n <= 2): f = 1
    else: f = naive(n-1) + naive(n-2)
    return f

## Memoized recursive function used to calculate Fib(n)
## it's calculating time is linear, therefore much faster than the naive() solution
memo = {}
def memoized(n):
	  if (n in memo): return memo[n]
	  if (n <= 2): f = 1
	  else: f = memoized(n-1)+memoized(n-2)
	  memo[n] = f
	  return f

## The bottom up solution calculates Fib(n) using a for loop in place of the recursion.
## The core logic is the same as the memoized solution, but simpler.
def bottom_up(n):
    fib = {}
    for k in range(1,n+1):
      if (k <= 2): f=1
      else: f = fib[k-1]+fib[k-2]
      fib[k] = f
    return fib[n]

print (naive(35))
print (memoized(35))
print (bottom_up(35))
